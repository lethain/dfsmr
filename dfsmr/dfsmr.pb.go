// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfsmr.proto

/*
Package dfsmr is a generated protocol buffer package.

It is generated from these files:
	dfsmr.proto

It has these top-level messages:
	StartRequest
	AckReply
	ChangesRequest
	ChangesReply
*/
package dfsmr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AckReply struct {
	Success        bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	SuccessMessage string `protobuf:"bytes,2,opt,name=successMessage" json:"successMessage,omitempty"`
	ErrorMessage   string `protobuf:"bytes,3,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *AckReply) Reset()                    { *m = AckReply{} }
func (m *AckReply) String() string            { return proto.CompactTextString(m) }
func (*AckReply) ProtoMessage()               {}
func (*AckReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AckReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AckReply) GetSuccessMessage() string {
	if m != nil {
		return m.SuccessMessage
	}
	return ""
}

func (m *AckReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type ChangesRequest struct {
}

func (m *ChangesRequest) Reset()                    { *m = ChangesRequest{} }
func (m *ChangesRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangesRequest) ProtoMessage()               {}
func (*ChangesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ChangesReply struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Client  string `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
}

func (m *ChangesReply) Reset()                    { *m = ChangesReply{} }
func (m *ChangesReply) String() string            { return proto.CompactTextString(m) }
func (*ChangesReply) ProtoMessage()               {}
func (*ChangesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChangesReply) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *ChangesReply) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func init() {
	proto.RegisterType((*StartRequest)(nil), "StartRequest")
	proto.RegisterType((*AckReply)(nil), "AckReply")
	proto.RegisterType((*ChangesRequest)(nil), "ChangesRequest")
	proto.RegisterType((*ChangesReply)(nil), "ChangesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DistributedFSMRunner service

type DistributedFSMRunnerClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*AckReply, error)
	Changes(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (DistributedFSMRunner_ChangesClient, error)
}

type distributedFSMRunnerClient struct {
	cc *grpc.ClientConn
}

func NewDistributedFSMRunnerClient(cc *grpc.ClientConn) DistributedFSMRunnerClient {
	return &distributedFSMRunnerClient{cc}
}

func (c *distributedFSMRunnerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*AckReply, error) {
	out := new(AckReply)
	err := grpc.Invoke(ctx, "/DistributedFSMRunner/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedFSMRunnerClient) Changes(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (DistributedFSMRunner_ChangesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DistributedFSMRunner_serviceDesc.Streams[0], c.cc, "/DistributedFSMRunner/Changes", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributedFSMRunnerChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DistributedFSMRunner_ChangesClient interface {
	Recv() (*ChangesReply, error)
	grpc.ClientStream
}

type distributedFSMRunnerChangesClient struct {
	grpc.ClientStream
}

func (x *distributedFSMRunnerChangesClient) Recv() (*ChangesReply, error) {
	m := new(ChangesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DistributedFSMRunner service

type DistributedFSMRunnerServer interface {
	Start(context.Context, *StartRequest) (*AckReply, error)
	Changes(*ChangesRequest, DistributedFSMRunner_ChangesServer) error
}

func RegisterDistributedFSMRunnerServer(s *grpc.Server, srv DistributedFSMRunnerServer) {
	s.RegisterService(&_DistributedFSMRunner_serviceDesc, srv)
}

func _DistributedFSMRunner_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedFSMRunnerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedFSMRunner/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedFSMRunnerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedFSMRunner_Changes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DistributedFSMRunnerServer).Changes(m, &distributedFSMRunnerChangesServer{stream})
}

type DistributedFSMRunner_ChangesServer interface {
	Send(*ChangesReply) error
	grpc.ServerStream
}

type distributedFSMRunnerChangesServer struct {
	grpc.ServerStream
}

func (x *distributedFSMRunnerChangesServer) Send(m *ChangesReply) error {
	return x.ServerStream.SendMsg(m)
}

var _DistributedFSMRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DistributedFSMRunner",
	HandlerType: (*DistributedFSMRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _DistributedFSMRunner_Start_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Changes",
			Handler:       _DistributedFSMRunner_Changes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfsmr.proto",
}

func init() { proto.RegisterFile("dfsmr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0x1b, 0x1e, 0x7d, 0x0c, 0x69, 0x8a, 0x46, 0x15, 0xaa, 0x2a, 0x16, 0xc8, 0x6c, 0xd8,
	0x60, 0x10, 0x7c, 0x01, 0x02, 0x21, 0xb1, 0xe8, 0x26, 0xfd, 0x02, 0xd7, 0x19, 0x4a, 0xa0, 0x71,
	0xca, 0x8c, 0xbd, 0xe0, 0xef, 0x11, 0xae, 0x8b, 0xd2, 0xed, 0xb5, 0x7c, 0xcf, 0xb9, 0x03, 0x67,
	0xd5, 0xbb, 0x34, 0xac, 0xb7, 0xdc, 0xfa, 0x56, 0x5d, 0x42, 0xbe, 0xf4, 0x86, 0x7d, 0x49, 0xdf,
	0x81, 0xc4, 0x63, 0x0e, 0x27, 0xce, 0x34, 0x34, 0xcb, 0xae, 0xb2, 0x9b, 0x91, 0x7a, 0x83, 0xe1,
	0x93, 0xfd, 0x2a, 0x69, 0xbb, 0xf9, 0xc1, 0x09, 0x0c, 0x24, 0x58, 0x4b, 0x22, 0xf1, 0x71, 0x88,
	0x17, 0x50, 0xa4, 0x60, 0x41, 0x22, 0x66, 0x4d, 0xb3, 0xa3, 0xbf, 0x4f, 0x38, 0x85, 0x9c, 0x98,
	0x5b, 0xde, 0xa7, 0xc7, 0xb1, 0xea, 0x1c, 0x8a, 0xe7, 0x0f, 0xe3, 0xd6, 0x24, 0x09, 0xa5, 0xee,
	0x20, 0xff, 0x4f, 0x12, 0xc0, 0xb6, 0x4d, 0x63, 0x5c, 0xb5, 0xa3, 0x63, 0x01, 0x7d, 0xbb, 0xa9,
	0xc9, 0xf9, 0x5d, 0xf1, 0xc3, 0x27, 0x4c, 0x5f, 0x6a, 0xf1, 0x5c, 0xaf, 0x82, 0xa7, 0xea, 0x75,
	0xb9, 0x28, 0x83, 0x73, 0xc4, 0x78, 0x0d, 0xa7, 0x71, 0x03, 0x8e, 0x75, 0x77, 0xcb, 0x7c, 0xa4,
	0xf7, 0xf2, 0xaa, 0x87, 0xb7, 0x30, 0x48, 0x34, 0x9c, 0xe8, 0x43, 0x93, 0xf9, 0x58, 0x77, 0x45,
	0x54, 0xef, 0x3e, 0x5b, 0xf5, 0xe3, 0x79, 0x1e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xbe,
	0x4d, 0xb5, 0x2d, 0x01, 0x00, 0x00,
}
